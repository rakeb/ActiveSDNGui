/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package activesdngui.views.actionviews;

import activesdngui.model.GenericSignaturePanel;
import activesdngui.model.Signature;
import static activesdngui.views.actionviews.ElephantCheckerView.RATE;
import static activesdngui.views.actionviews.ElephantCheckerView.SIG_NAME;
import java.util.HashMap;
import javax.swing.JTextField;

/**
 *
 * @author mislam7
 */
public class NewComerCheckerView extends GenericSignaturePanel{

    public static final String SIG_NAME = "New Comer Checker";
    public static final String TIME = "Time";
    public static final String SWITCH_ID = "Switch ID";
    /**
     * Creates new form ElephantCheckerView
     */
    public NewComerCheckerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtfSwitchId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtfTime = new javax.swing.JTextField();

        jLabel1.setText("Switch Id");

        jLabel2.setText("Time");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfSwitchId, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfTime, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(183, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfSwitchId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(215, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jtfSwitchId;
    private javax.swing.JTextField jtfTime;
    // End of variables declaration//GEN-END:variables

    public JTextField getJtfSwitchId() {
        return jtfSwitchId;
    }

    public void setJtfSwitchId(JTextField jtfSwitchId) {
        this.jtfSwitchId = jtfSwitchId;
    }

    public JTextField getJtfTime() {
        return jtfTime;
    }

    public void setJtfTime(JTextField jtfTime) {
        this.jtfTime = jtfTime;
    }

    @Override
    public Signature parseData() {
        Signature signature = new Signature(SIG_NAME, Signature.NEW_COMER_CHECKER_ID);

        HashMap<String, Object> fields = signature.getFields();
        fields.put(TIME, jtfTime.getText());
        fields.put(SWITCH_ID, jtfSwitchId.getText());
        
        return signature;
    }

    @Override
    public void loadData(Signature signature) {
        if (signature != null) {
            HashMap<String, Object> fields = signature.getFields();
            jtfSwitchId.setText((String) fields.get(SWITCH_ID));
            jtfTime.setText((String) fields.get(TIME));
        }
    }

    @Override
    public Integer getSignatureId() {
        return Signature.NEW_COMER_CHECKER_ID;
    }
    
    
}
